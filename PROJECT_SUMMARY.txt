================================================================================
                    INTELLIGENCE SPRINKLE PESTICIDE SYSTEM
                           COMPLETE PROJECT SUMMARY
================================================================================

PROJECT OVERVIEW:
================
An automated plant disease detection and pesticide control system designed for 
Raspberry Pi deployment. The system captures live video, detects plant leaves, 
analyzes diseases using AI, and automatically controls pesticide spraying based 
on severity levels.

TECHNICAL ARCHITECTURE:
=======================
Frontend: HTML/CSS/JavaScript (Responsive Web Dashboard)
Backend: Flask (Python) Web Framework
Video Processing: OpenCV for camera capture and image processing
Database: SQLite for data logging and persistence
Hardware Control: GPIO integration for Raspberry Pi sprayer control
AI Integration: Google Gemini API / Plant.ID for disease detection

SYSTEM COMPONENTS:
==================
1. Video Capture Service (app/video_detection.py)
2. Disease Detection Engine (app/detection.py)
3. Hardware Control Module (app/gpio_control.py)
4. Database Management (app/db.py)
5. Web API Routes (app/routes.py)
6. User Interface (templates/ + static/)

COMPLETE SYSTEM FLOW:
=====================

PHASE 1: SYSTEM INITIALIZATION
------------------------------
1. User opens web browser and navigates to http://localhost:5000
2. Flask application loads dashboard with video controls and data tables
3. System initializes database tables (captures, detections, actions)
4. Camera service initializes but remains inactive

PHASE 2: VIDEO CAPTURE INITIATION
---------------------------------
1. User clicks "Start Video" button on dashboard
2. Frontend JavaScript sends POST request to /api/start_video
3. Backend calls video_service.start_camera(camera_index=0)
4. OpenCV opens camera device (USB webcam or Pi Camera)
5. Camera properties set: 640x480 resolution, 15 FPS (optimized for Pi)
6. Video stream begins at /video_feed endpoint
7. Live camera feed displays on webpage
8. Status updates to "Video running - click on leaves to analyze them"

PHASE 3: LEAF DETECTION & SELECTION
-----------------------------------
1. User positions camera to view plant leaves
2. User clicks on specific leaf in video feed
3. JavaScript captures click coordinates (x, y) relative to video element
4. Coordinates converted to video frame coordinates (640x480)
5. Frontend sends POST request to /api/video_click with coordinates
6. Backend receives coordinates and calls video_service.add_click_region(x, y)
7. LightweightLeafSelector creates 150x150 pixel region around click point
8. Region bounds calculated: (x-75, y-75) to (x+75, y+75)
9. Region added to selected_regions array
10. Green bounding box appears on video with "Region X" label
11. Status updates to "Region X created! Click 'Analyze Region' to detect disease"

PHASE 4: DISEASE ANALYSIS
-------------------------
1. User clicks "Analyze Region" button for specific region
2. JavaScript calls /api/detect_leaf with region_index
3. Backend receives request and calls video_service.detect_and_classify_leaf(index)
4. System retrieves current video frame and selected region coordinates
5. Leaf region cropped from frame using OpenCV
6. Cropped image saved as temporary file (temp_leaf_timestamp.jpg)
7. Temporary file sent to existing /api/upload_detect endpoint
8. Disease detection backend processes image:
   - Mock: Generates random disease/severity (for testing)
   - Gemini: Sends to Google AI for real analysis
   - Plant.ID: Sends to external plant health API
9. API returns: disease type, severity percentage, classification (healthy/infected)
10. Temporary file cleaned up
11. Results displayed in UI with color coding (green=healthy, red=infected)

PHASE 5: DECISION MAKING & ACTION
---------------------------------
1. System evaluates severity level against configured thresholds:
   - Low threshold: 30% (configurable in .env)
   - High threshold: 70% (configurable in .env)
2. Decision logic:
   - Severity < 30%: No action required
   - Severity 30-70%: Short spray (2 seconds)
   - Severity > 70%: Long spray (5 seconds)
3. If action required:
   - GPIO pin activated (default: BCM pin 17)
   - Relay module switches on pump/sprayer
   - Duration controlled by severity level
   - Action logged in database
4. If no action: "none" action logged with 0ms duration

PHASE 6: DATA LOGGING & STORAGE
--------------------------------
1. All activities logged to SQLite database:
   - CAPTURES table: Image paths and timestamps
   - DETECTIONS table: Disease results, severity, raw API responses
   - ACTIONS table: Spraying actions, durations, timestamps
2. Recent data displayed in dashboard tables
3. Images stored in data/images/ directory
4. Database file: data/db/sprinkle.db

PHASE 7: VIDEO TERMINATION
--------------------------
1. User clicks "Stop Video" button
2. Frontend sends POST request to /api/stop_video
3. Backend calls video_service.stop_camera()
4. Camera resources released (cap.release())
5. Selected regions cleared
6. Current frame reset to None
7. Status updates to "Video stopped"
8. Video feed stops updating

API ENDPOINTS DETAIL:
=====================

GET / - Main dashboard with video controls and data tables
GET /video_feed - Live video stream (multipart/x-mixed-replace)
GET /images/<filename> - Serve captured/uploaded images

POST /api/start_video - Initialize and start camera
POST /api/stop_video - Stop camera and release resources
POST /api/video_click - Create leaf region from click coordinates
POST /api/detect_leaf - Analyze specific leaf region for disease
POST /api/capture_detect - Legacy single image capture (with GPIO action)
POST /api/upload_detect - Disease detection without GPIO action

CONFIGURATION OPTIONS:
=====================
Environment variables (.env file):
- CAMERA_SOURCE: picamera2/opencv/mock
- DETECTION_BACKEND: mock/gemini/plantid
- GEMINI_API_KEY: Google AI API key
- GEMINI_MODEL: gemini-1.5-pro (recommended)
- SEVERITY_LOW_THRESHOLD: 30 (percentage)
- SEVERITY_HIGH_THRESHOLD: 70 (percentage)
- SPRAY_DURATION_LOW_MS: 2000 (2 seconds)
- SPRAY_DURATION_HIGH_MS: 5000 (5 seconds)
- GPIO_PIN_SPRAYER: 17 (BCM pin number)

DATABASE SCHEMA:
===============
CAPTURES:
- id (INTEGER PRIMARY KEY)
- image_path (TEXT)
- created_at (DATETIME)

DETECTIONS:
- id (INTEGER PRIMARY KEY)
- capture_id (INTEGER, FOREIGN KEY)
- disease (TEXT)
- severity (REAL)
- raw_json (TEXT)
- created_at (DATETIME)

ACTIONS:
- id (INTEGER PRIMARY KEY)
- detection_id (INTEGER, FOREIGN KEY)
- action (TEXT)
- duration_ms (INTEGER)
- created_at (DATETIME)

DEPLOYMENT FOR RASPBERRY PI:
============================
1. Install dependencies: pip install -r requirements.txt
2. Install Pi-specific packages: sudo apt install python3-picamera2
3. Configure .env file with production settings
4. Set DETECTION_BACKEND=gemini for real AI analysis
5. Connect relay module to GPIO pin 17
6. Run as service: python run.py
7. Access via: http://<pi-ip>:5000

PERFORMANCE OPTIMIZATIONS:
==========================
- Video resolution: 640x480 (balanced quality/performance)
- Frame rate: 15 FPS (reduces CPU load)
- Region size: 150x150 pixels (consistent analysis)
- Click cooldown: 1 second (prevents spam)
- Temporary file cleanup: Automatic after API calls
- Database indexing: On created_at fields for fast queries

SECURITY FEATURES:
==================
- Input validation on all API endpoints
- File type restrictions for image uploads
- Temporary file cleanup to prevent disk usage
- Error handling with user-friendly messages
- No sensitive data exposure in logs

MONITORING & DEBUGGING:
=======================
- Console logging for camera operations
- Database logging for all system activities
- Error handling with detailed error messages
- Status updates in UI for user feedback
- Debug mode available for development

FUTURE ENHANCEMENTS:
====================
- Real-time MobileNet-SSD leaf detection
- Multiple camera support
- Weather integration for spraying decisions
- Mobile app for remote monitoring
- Cloud-based disease database
- Machine learning model training on collected data

TROUBLESHOOTING:
================
Common Issues:
1. Camera not starting: Check device permissions and USB connections
2. Video feed not displaying: Verify OpenCV installation
3. Disease detection failing: Check API keys and internet connectivity
4. GPIO not working: Verify pin configuration and hardware connections
5. Database errors: Check file permissions and disk space

This system provides a complete, automated solution for intelligent plant disease 
management with real-time video analysis, AI-powered disease detection, and 
automated pesticide control - all optimized for Raspberry Pi deployment.

================================================================================
END OF PROJECT SUMMARY
================================================================================ 